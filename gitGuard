#!/usr/bin/perl

use strict;
use warnings;

########################################
# Configuration
#
my $debug = 1;
my $log = 1;
my $logfile = "~/.gitGuard.log";

my @forbiddenMergeBranches = ("Ticket_Test_Branch");
my @allowedBranchBranches = ("master");
########################################

# Enable autoflushing
$| = 1;

my $gitExecutable = &getGitExecutable();
my $args = &expandCommandByAliases();

# exit with a failure if something problematic is tried,
# so that the following (external) call to git is not executed.
if (&isBranchingCommand($args)) {
  my $branchWeAreIn = &getGitBranchname();
  if ($branchWeAreIn eq "") {
    exit 1;
  }
  unless (&isCurrentlyAllowedToBranch($branchWeAreIn)) {
    print "\nYou are about to branch from '$branchWeAreIn'.\n";
    print "Do you really want to do this?\n";
    print "\n  Type 'yes' if you do.\n\n";
    my $input = <STDIN>;
    if ($input !~ m/^yes$/) {
      exit 1;
    }
  }
  my $otherBranch = &getPossibleOtherBranch();
  my $lastCommit = &getLastCommit();
  $log && `date >> $logfile`;
  $log && `pwd >> $logfile`;
  $log && `echo "Branched '$otherBranch' from '$branchWeAreIn' ($lastCommit)\n" >> $logfile`;
} elsif (&isMergingCommand($args)) {
  for (my $i = 0; $i < @forbiddenMergeBranches; $i++) {
    if ($args =~ /\b$forbiddenMergeBranches[$i]\b/) {
      print "You should never merge '$forbiddenMergeBranches[$i]' into another branch...\n";
      exit 1;
    }
  }
  my $branchWeAreIn = &getGitBranchname();
  my $otherBranch = &getPossibleOtherBranch();
  $log && `date >> $logfile`;
  $log && `pwd >> $logfile`;
  $log && `echo "Merged '$otherBranch' into '$branchWeAreIn'\n" >> $logfile`;
}

# exit with success, so that the following (external) call to git is executed
exit 0;

#####################
# subroutines below #
#####################

sub isBranchingCommand {
  $args = shift @_;
  return $args =~ m/^checkout -[bB]\b/ || ($args =~ m/^branch\b.+/ && $args !~ m/^branch -/);
}

sub isMergingCommand {
  return (shift @_) =~ m/^merge\b/;
}

sub isCurrentlyAllowedToBranch {
  return &matchesAny((shift @_), @allowedBranchBranches);
}

sub matchesAny {
  my ($string, @pattern) = @_;
  for (my $i = 0; $i < @pattern; $i++) {
    $debug && print "'$string' matches '$pattern[$i]': ";
    if ($string =~ m/$pattern[$i]/) {
      $debug && print "yes!\n";
      return 1;
    } else {
      $debug && print "no!\n";
    }
  }
}

sub prepareArgs {
  my @result;
  for (my $i = 0; $i < @_; $i++) {
    if ($_[$i] =~ m/ /) {
      $_[$i] = '"' . $_[$i] . '"';
    }
    push(@result, $_[$i]);
  }
  return @result;
}

sub getGitExecutable {
  my $result = `which git`;
  chomp($result);
  $debug && print "gitExexutable: $result\n";
  return $result;
}

sub getGitBranchname {
  my $result = `$gitExecutable branch | grep '^*'`;
  chomp($result);
  $result =~ s/^\* (\S*).*/$1/;
  $debug && print "current branch: $result\n";
  return $result;
}

sub getLastCommit {
  my $result = `$gitExecutable log | head -n 1`;
  chomp($result);
  $debug && print "last commit: $result\n";
  return $result;
}

sub getPossibleOtherBranch {
  my $result = $ARGV[-1];
  $debug && print "Last argument: $result\n";
  return $result;
}

sub expandCommandByAliases {
  my $args = join(' ', &prepareArgs(@ARGV));
  my $aliases = `$gitExecutable config -l`;
  my @alias = split('\n', $aliases);
  $debug && print "Args before: '$args'\n";
  for (my $i = 0; $i < @alias; $i++) {
    my ($key, $value) = split('=', $alias[$i]);
    $key =~ s/^alias.//;
    if ($args =~ m/^\s*$key\b/) {
      $args =~ s/^\s*$key/$value/;
    }
  }
  $debug && print "Args after: '$args'\n";
  return $args;
}
