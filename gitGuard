#!/usr/bin/perl

use strict;
use warnings;

my $debug = 0;
my $gitExecutable = &getGitExecutable();

my @forbiddenMergeBranches = ("Ticket_Test_Branch");
my @allowedBranchBranches = ("master");

# Enable autoflushing
$| = 1;

# find relevant aliases and add them to @mergePattern or @branchPattern
my @branchPattern = ("\\bbranch\\b[^-]*\$","\\bcheckout\\b.*-[Bb]");
my @mergePattern = ("\\bmerge\\b");

my $aliases = `$gitExecutable config -l | grep -e "^alias.*\\(checkout\\|branch\\|merge\\)"`;
$debug && print "Aliases:\n$aliases\n";
my @alias = split('\n', $aliases);

for (my $i = 0; $i < @alias; $i++) {
  my ($key, $value) = split('=', $alias[$i]);
  $key =~ s/^alias./\\b/;
  if (&relevantValue($value)) {
    $key .= "\\b";
    if ($value =~ m/checkout/ && $value !~ m/-[Bb]/) {
      $key .= ".*-[bB]";
    } elsif ($value =~ m/branch/) {
      $key .= "[^-]+\$";
    }
    if ($value =~ m/merge/) {
      $debug && print "MergePattern: $key\n";
      push(@mergePattern, $key);
    } else {
      $debug && print "BranchPattern: $key\n";
      push(@branchPattern, $key);
    }
  }
}

# join all args into a string, surrounding params including spaces with quotes
my $args = join(' ', &prepareArgs(@ARGV));

# exit with a failure if something problematic is tries,
# so that the following (external) call to git is not executed.
if (&matchesAny($args, 0, @branchPattern)) {
  my $branchname = `$gitExecutable branch | grep '^*'`;
  chomp($branchname);
  $debug && print "Branchname: $branchname\n";
  if ($branchname eq "") {
    exit 1;
  }
  $branchname =~ s/^\* (\S*).*/$1/;
  unless (&matchesAny($branchname, 1, @allowedBranchBranches)) {
    print "\nYou are about to branch from '$branchname'.\n";
    print "Do you really want to do this?\n";
    print "\n  Type 'yes' if you do.\n\n";
    my $input = <STDIN>;
    if ($input !~ m/^yes$/) {
      exit 1;
    }
  }
} elsif (&matchesAny($args, 0, @mergePattern)) {
  for (my $i = 0; $i < @forbiddenMergeBranches; $i++) {
    if ($args =~ /\b$forbiddenMergeBranches[$i]\b/) {
      print "You should never merge '$forbiddenMergeBranches[$i]' into another branch...\n";
      exit 1;
    }
  }
}

# exit with success, so that the following (external) call to git is executed
exit 0;

#####################
# subroutines below #
#####################

sub relevantValue {
  my $string = shift @_;
  return $string !~ m/f()/ && (($string =~ m/\bmerge\b/ || $string =~ /\bcheckout\b/ || ($string =~ m/^branch/ && $string !~ m/-/)));
}

sub matchesAny {
  my ($string, $boundedMatch, @pattern) = @_;
  for (my $i = 0; $i < @pattern; $i++) {
    my $pattern = ($boundedMatch ? "\\b$pattern[$i]\\b" : "$pattern[$i]");
    $debug && print "$string matches $pattern: ";
    if ($string =~ m/$pattern/) {
      $debug && print "yes!\n";
      return 1;
    } else {
      $debug && print "no!\n";
    }
  }
}

sub prepareArgs {
  my @result;
  for (my $i = 0; $i < @_; $i++) {
    if ($_[$i] =~ m/ /) {
      $_[$i] = '"' . $_[$i] . '"';
    }
    push(@result, $_[$i]);
  }
  return @result;
}

sub getGitExecutable {
  my $git = `which git`;
  chomp($git);
  $debug && print "Git: $gitExecutable\n";
  return $git;
}
